@page "/employeetypes/"
@using HR.ScheduleManagement.Blazor.Contracts
@using HR.ScheduleManagement.Blazor.Models.EmployeeTypes





<h3>Schema</h3>

<div class="m-2 d-flex justify-content-end">
    <button @onclick="CreateEmployeeType" class="btn btn-success">Add Employee</button>
</div>


@if (string.IsNullOrEmpty(Message) == false)
{
    <div class="alert alert-danger">
        @Message
    </div>
}

<div clas></div>
@if (EmployeeTypes == null)
{
    <p>Loading Data...</p>
}
else
{

    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }

        th, td {
            padding: 10px 15px; 
            margin: 0; 
            line-height: 1.5; 
            text-align: left;
            vertical-align: middle;
            white-space: nowrap;
            font-size: 18px; 
            height: auto; 
        }

        .table thead th {
            background-color: #2c3e50;
            color: #ecf0f1;
        }

        .table tbody td {
            background-color: #3498db;
            color: #ffffff;
        }

        .table tbody tr:nth-child(odd) td {
            background-color: #2980b9;
        }

        .table tbody tr:nth-child(even) td {
            background-color: #3498db;
        }

        .btn-warning {
            background-color: #f39c12;
            color: #ffffff;
            padding: 5px 10px; 
            margin: 0; 
            line-height: 1.2; 
            font-size: 16px;
        }

        .btn-danger {
            background-color: #e74c3c;
            color: #ffffff;
            padding: 5px 10px; 
            margin: 0; 
            line-height: 1.2; 
            font-size: 16px;
        }
    </style>
    <div class="container">
        <div class="row">
            <table class="table table-striped table-bordered">
                <thead class="thead-dark">
                    <tr>
                        <th>Name</th>
                        <th>Before Lunch</th>
                        <th>After Lunch</th>
                        <th>Extra Task</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var employeeType in EmployeeTypes)
                    {
                        string taskStyle = "";
                        string secondTaskStyle = "";

                        // Convert tasks to lowercase for case-insensitive comparison
                        string taskLower = employeeType.Task?.ToLower();
                        string secondTaskLower = employeeType.secondTask?.ToLower();

                        // Determine styles based on Task
                        if (taskLower == "sjuk")
                        {
                            taskStyle = "background-color: red; color: white;";
                        }
                        else if (taskLower == "ledig")
                        {
                            taskStyle = "background-color: green; color: black;";
                        }

                        // Determine styles based on secondTask
                        if (secondTaskLower == "sjuk")
                        {
                            secondTaskStyle = "background-color: red; color: white;";
                        }
                        else if (secondTaskLower == "ledig")
                        {
                            secondTaskStyle = "background-color: green; color: black;";
                        }

                        <tr>
                            <td>@employeeType.Name</td>
                            <td style="@taskStyle">@employeeType.Task</td>
                            <td style="@secondTaskStyle">@employeeType.secondTask</td>
                            <td>@employeeType.extraTask</td>
                            <td>
                                <button @onclick="@(() => EditEmployeeType(employeeType.Id))" class="btn btn-warning btn-sm">Edit</button>
                                <button @onclick="@(() => DeleteEmployeeType(employeeType.Id))" class="btn btn-danger btn-sm">Delete</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>














}
@code{

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IEmployeeTypeService EmployeeTypeService { get; set; }


    public List<EmployeeTypeVM> EmployeeTypes { get; private set; }


    public string Message { get; set; } = string.Empty;

    protected void CreateEmployeeType()
    {
        NavigationManager.NavigateTo("/employeetypes/create/");
    }

    protected void EditEmployeeType(int id)
    {
        NavigationManager.NavigateTo($"/employeetypes/edit/{id}");
    }

    protected void DetailsEmployeeType(int id)
    {
        NavigationManager.NavigateTo($"/employeetypes/details/{id}");
    }

    protected async Task DeleteEmployeeType(int id)
    {
        var response = await EmployeeTypeService.DeleteEmployeeType(id);
        if (response.Success)
        {

            await OnInitializedAsync();
        }
        else
        {
            Message = response.Message;
        }
    }

    protected override async Task OnInitializedAsync() => EmployeeTypes = await EmployeeTypeService.GetEmployeeTypes();

}
                          