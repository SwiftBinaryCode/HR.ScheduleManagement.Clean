@page "/employeetypes/"
@using HR.ScheduleManagement.Blazor.Contracts
@using HR.ScheduleManagement.Blazor.Models.EmployeeTypes

<h3>Schema O/E</h3>

@if (string.IsNullOrEmpty(Message) == false)
{
    <div class="alert alert-danger">
        @Message
    </div>
}

<div clas></div>
@if (EmployeeTypes == null)
{
    <p>Loading Data...</p>
}
else
{
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f4f4f9;
            color: #333;
        }

        header {
            background-color: #2c3e50;
            padding: 10px 0;
            color: #ecf0f1;
            text-align: center;
        }

            header .logo {
                font-size: 24px;
                font-weight: bold;
            }

        nav ul {
            list-style: none;
            padding: 0;
            display: flex;
            justify-content: center;
        }

            nav ul li {
                margin: 0 10px;
            }

                nav ul li a {
                    color: #ecf0f1;
                    text-decoration: none;
                    font-size: 18px;
                }

        .container {
            width: 90%;
            margin: 20px auto;
        }

        .table-container {
            margin: 20px 0;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 20px;
            background-color: #ffffff;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        th, td {
            padding: 10px 15px;
            text-align: left;
            font-size: 16px;
            border-bottom: 1px solid #ddd;
        }

        thead th {
            background-color: #34495e;
            color: #ecf0f1;
        }

        tbody tr:nth-child(odd) {
            background-color: #f9f9f9;
        }

        tbody tr:nth-child(even) {
            background-color: #ecf0f1;
        }

        .btn {
            padding: 5px 10px;
            border: none;
            cursor: pointer;
            font-size: 14px;
            border-radius: 3px;
            margin: 0 5px;
        }

        .btn-warning {
            background-color: #f39c12;
            color: #ffffff;
        }

        .btn-danger {
            background-color: #e74c3c;
            color: #ffffff;
        }

        .button-container {
            display: flex;
            justify-content: flex-end;
            margin-bottom: 20px;
        }

        .add-employee {
            background-color: #27ae60;
            color: #ffffff;
            padding: 10px 15px;
            text-decoration: none;
            border-radius: 5px;
            display: inline-block;
            margin-top: 10px;
        }

        /* Additional CSS for the blue button to match the green one */
        .btn-primary {
            background-color: #3498db; /* Ensure this matches the primary button color */
            color: #ffffff;
            padding: 10px 15px;
            text-decoration: none;
            border-radius: 5px;
            display: inline-block;
            margin-top: 10px;
            border: none; /* Ensure no border is applied */
            cursor: pointer;
            font-size: 14px; /* Adjust font size to match the other buttons */
        }
    </style>

<!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <link rel="stylesheet" href="styles.css">
        <title>Employee Schedule</title>
    </head>
    <body>
        <main>
            <div class="container">
                <div class="button-container">
                    <button @onclick="CreateEmployeeType" class="btn btn-success add-employee">Add Employee</button>
                    <button @onclick="AssignRandomTasks" class="btn btn-primary">Assign Random Tasks</button>
                </div>
                <div class="table-container">
                    <table>
                        <thead>
                            <tr>
                                <th>Name</th>
                                <th>Before Lunch</th>
                                <th>After Lunch</th>
                                <th>Extra Task</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var employeeType in EmployeeTypes)
                            {
                                string taskStyle = "";
                                string secondTaskStyle = "";

                                string taskLower = employeeType.Task?.ToLower();
                                string secondTaskLower = employeeType.secondTask?.ToLower();

                                if (taskLower == "sjuk")
                                {
                                    taskStyle = "background-color: red; color: white;";
                                }
                                else if (taskLower == "ledig")
                                {
                                    taskStyle = "background-color: green; color: black;";
                                }

                                if (secondTaskLower == "sjuk")
                                {
                                    secondTaskStyle = "background-color: red; color: white;";
                                }
                                else if (secondTaskLower == "ledig")
                                {
                                    secondTaskStyle = "background-color: green; color: black;";
                                }

                                <tr>
                                    <td>@employeeType.Name</td>
                                    <td style="@taskStyle">@employeeType.Task</td>
                                    <td style="@secondTaskStyle">@employeeType.secondTask</td>
                                    <td>@employeeType.extraTask</td>
                                    <td>
                                        <button @onclick="@(() => EditEmployeeType(employeeType.Id))" class="btn btn-warning">Edit</button>
                                        <button @onclick="@(() => DeleteEmployeeType(employeeType.Id))" class="btn btn-danger">Delete</button>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </main>
    </body>
    </html>



}
@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public IEmployeeTypeService EmployeeTypeService { get; set; }

    public List<EmployeeTypeVM> EmployeeTypes { get; private set; }
    public string Message { get; set; } = string.Empty;
    private List<string> randomTasks = new List<string>
    {
        "Scanning",
        "O/E",
        "Shipping",
        "Limning",
    };

    protected void CreateEmployeeType()
    {
        NavigationManager.NavigateTo("/employeetypes/create/");
    }

    protected void EditEmployeeType(int id)
    {
        NavigationManager.NavigateTo($"/employeetypes/edit/{id}");
    }

    protected void DetailsEmployeeType(int id)
    {
        NavigationManager.NavigateTo($"/employeetypes/details/{id}");
    }

    protected async Task DeleteEmployeeType(int id)
    {
        var response = await EmployeeTypeService.DeleteEmployeeType(id);
        if (response.Success)
        {
            await OnInitializedAsync();
        }
        else
        {
            Message = response.Message;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        EmployeeTypes = await EmployeeTypeService.GetEmployeeTypes();
    }

    private async Task AssignRandomTasks()
    {
        var rand = new Random();
        foreach (var employee in EmployeeTypes)
        {
            employee.Task = randomTasks[rand.Next(randomTasks.Count)];
            employee.secondTask = randomTasks[rand.Next(randomTasks.Count)];

            // Save the updated employee task to the database
            var response = await EmployeeTypeService.UpdateEmployeeType(employee.Id, employee);
            if (!response.Success)
            {
                Message = response.Message;
                break;
            }
        }
        StateHasChanged();
    }
}