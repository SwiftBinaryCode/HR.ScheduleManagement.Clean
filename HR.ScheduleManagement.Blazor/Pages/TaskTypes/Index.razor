@page "/tasktypes/"


<h3>Tasks</h3>

<div class="m-2 d-flex justify-content-end">
    <button @onclick="CreateTaskType" class="btn btn-success">Add Task</button>
</div>

@if (string.IsNullOrEmpty(Message) == false)
{
    <div class="alert alert-danger">
        @Message
    </div>
}

<div clas></div>
@if (TaskTypes == null)
{
    <p>Loading Data...</p>
}
else
{
    <div class="row">
        @foreach (var taskType in TaskTypes)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">ID: @taskType.Id</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@taskType.Title</h6>
                        <button @onclick="@(() => EditTaskType(taskType.Id))" class="btn btn-warning">Edit</button>
                        <button @onclick="@(() => DeleteTaskType(taskType.Id))" class="btn btn-danger">Delete</button>
                        <button @onclick="@(() => DetailsTaskType(taskType.Id))" class="btn btn-info">Details</button>
                    </div>
                </div>
            </div>
        }
    </div>


}



@code {
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    [Inject]
    public ITaskTypeService TaskTypeService { get; set; }


    public List<TaskTypeVM> TaskTypes { get; private set; }

    public string Message { get; set; } = string.Empty;

    protected void CreateTaskType()
    {
        NavigationManager.NavigateTo("/tasktypes/create/");
    }

    protected void EditTaskType(int id)
    {
        NavigationManager.NavigateTo($"/tasktypes/edit/{id}");
    }

    protected void DetailsTaskType(int id)
    {
        NavigationManager.NavigateTo($"/tasktypes/details/{id}");
    }

    protected async Task DeleteTaskType(int id)
    {
        var response = await TaskTypeService.DeleteTaskType(id);
        if (response.Success)
        {

            await OnInitializedAsync();
        }
        else
        {
            Message = response.Message;
        }
    }

    protected override async Task OnInitializedAsync() => TaskTypes = await TaskTypeService.GetTaskTypes();

}
